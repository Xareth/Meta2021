{"ast":null,"code":"import _regeneratorRuntime from\"/Users/mikolajszadkowski/Library/Mobile Documents/com~apple~CloudDocs/AppDevelopment/motortest/Mnet 2020/Mnet2/frontend-react/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/mikolajszadkowski/Library/Mobile Documents/com~apple~CloudDocs/AppDevelopment/motortest/Mnet 2020/Mnet2/frontend-react/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/mikolajszadkowski/Library/Mobile Documents/com~apple~CloudDocs/AppDevelopment/motortest/Mnet 2020/Mnet2/frontend-react/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from\"react\";import{LoadForm,UpdateFormOnChange,AfterFormSubmit}from\"../forms/FormHandler\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function _LoginForm(props){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),loginForm=_useState2[0],setLoginForm=_useState2[1];// Load default view for submodule\nuseEffect(function(){LoadForm(\"/_login\",setLoginForm);},[]);// Handle form after submit button is pressed\nfunction AfterLoginFormSubmit(_x){return _AfterLoginFormSubmit.apply(this,arguments);}// Each character input in form is recorded to form const\nfunction _AfterLoginFormSubmit(){_AfterLoginFormSubmit=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(event){var requestOptions,response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:event.preventDefault();// Simple POST request with a JSON body using fetch\nrequestOptions={method:'POST',headers:{'Content-Type':'application/json'},dataType:'json',body:JSON.stringify(loginForm)};fetch('/_login',requestOptions).then(function(response){return response.json();}).then(function(data){return console.log(data);});_context.next=5;return AfterFormSubmit(loginForm);case 5:response=_context.sent;console.log(\"my response\");console.log(response);case 8:case\"end\":return _context.stop();}}},_callee);}));return _AfterLoginFormSubmit.apply(this,arguments);}function UpdateLoginFormOnChange(event){UpdateFormOnChange(event,loginForm,setLoginForm);}// Render form\nreturn/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"form\",{onSubmit:AfterLoginFormSubmit,children:[console.log(loginForm),loginForm.length>0?loginForm.map(function(data){return/*#__PURE__*/_jsx(Input,{id:data.id,label:data.label,type:data.type,field:data.field,update:UpdateLoginFormOnChange},data.id);}):\"\"]})});}// Render each field\nfunction Input(props){return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{children:props.label}),/*#__PURE__*/_jsx(\"input\",{id:props.id,type:props.type,onChange:props.update,name:props.label})]});}export default _LoginForm;","map":{"version":3,"sources":["/Users/mikolajszadkowski/Library/Mobile Documents/com~apple~CloudDocs/AppDevelopment/motortest/Mnet 2020/Mnet2/frontend-react/src/components/users/_LoginForm.js"],"names":["React","useEffect","useState","LoadForm","UpdateFormOnChange","AfterFormSubmit","_LoginForm","props","loginForm","setLoginForm","AfterLoginFormSubmit","event","preventDefault","requestOptions","method","headers","dataType","body","JSON","stringify","fetch","then","response","json","data","console","log","UpdateLoginFormOnChange","length","map","id","label","type","field","Input","update"],"mappings":"6mBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,OAAQC,QAAR,CAAkBC,kBAAlB,CAAsCC,eAAtC,KAA4D,sBAA5D,C,wFAGA,QAASC,CAAAA,UAAT,CAAoBC,KAApB,CAA2B,eAEaL,QAAQ,CAAC,EAAD,CAFrB,wCAEfM,SAFe,eAEJC,YAFI,eAIvB;AACAR,SAAS,CAAC,UAAM,CAACE,QAAQ,CAAC,SAAD,CAAYM,YAAZ,CAAR,CAAkC,CAA1C,CAA4C,EAA5C,CAAT,CAEA;AAPuB,QAQRC,CAAAA,oBARQ,yDA4BvB;AA5BuB,+GAQvB,iBAAoCC,KAApC,8IAEIA,KAAK,CAACC,cAAN,GAEA;AACMC,cALV,CAK2B,CACnBC,MAAM,CAAE,MADW,CAEnBC,OAAO,CAAE,CAAC,eAAgB,kBAAjB,CAFU,CAGnBC,QAAQ,CAAE,MAHS,CAInBC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAeX,SAAf,CAJa,CAL3B,CAWIY,KAAK,CAAC,SAAD,CAAYP,cAAZ,CAAL,CACKQ,IADL,CACU,SAAAC,QAAQ,QAAIA,CAAAA,QAAQ,CAACC,IAAT,EAAJ,EADlB,EAEKF,IAFL,CAEU,SAAAG,IAAI,QAAIC,CAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ,CAAJ,EAFd,EAXJ,sBAe2BnB,CAAAA,eAAe,CAACG,SAAD,CAf1C,QAeUc,QAfV,eAgBIG,OAAO,CAACC,GAAR,CAAY,aAAZ,EACAD,OAAO,CAACC,GAAR,CAAYJ,QAAZ,EAjBJ,sDARuB,uDA6BvB,QAASK,CAAAA,uBAAT,CAAiChB,KAAjC,CAAwC,CACpCP,kBAAkB,CAACO,KAAD,CAAQH,SAAR,CAAmBC,YAAnB,CAAlB,CACH,CAED;AACA,mBAAQ,kCACJ,cAAM,QAAQ,CAAEC,oBAAhB,WACKe,OAAO,CAACC,GAAR,CAAYlB,SAAZ,CADL,CAEKA,SAAS,CAACoB,MAAV,CAAmB,CAAnB,CAAuBpB,SAAS,CAACqB,GAAV,CAAc,SAACL,IAAD,CAAU,CAAE,mBAAO,KAAC,KAAD,EAErD,EAAE,CAAEA,IAAI,CAACM,EAF4C,CAGrD,KAAK,CAAEN,IAAI,CAACO,KAHyC,CAIrD,IAAI,CAAEP,IAAI,CAACQ,IAJ0C,CAKrD,KAAK,CAAER,IAAI,CAACS,KALyC,CAMrD,MAAM,CAAEN,uBAN6C,EAChDH,IAAI,CAACM,EAD2C,CAAP,CAO7C,CAPmB,CAAvB,CAOQ,EATb,GADI,EAAR,CAaH,CAED;AACA,QAASI,CAAAA,KAAT,CAAe3B,KAAf,CAAsB,CAClB,mBAAO,oCACH,uBAAQA,KAAK,CAACwB,KAAd,EADG,cAEH,cAAO,EAAE,CAAExB,KAAK,CAACuB,EAAjB,CAAqB,IAAI,CAAEvB,KAAK,CAACyB,IAAjC,CAAuC,QAAQ,CAAEzB,KAAK,CAAC4B,MAAvD,CAA+D,IAAI,CAAE5B,KAAK,CAACwB,KAA3E,EAFG,GAAP,CAIH,CAGD,cAAezB,CAAAA,UAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {LoadForm, UpdateFormOnChange, AfterFormSubmit} from \"../forms/FormHandler\";\n\n\nfunction _LoginForm(props) {\n\n    const [ loginForm, setLoginForm ] = useState([]);\n\n    // Load default view for submodule\n    useEffect(() => {LoadForm(\"/_login\", setLoginForm)}, []);\n\n    // Handle form after submit button is pressed\n    async function AfterLoginFormSubmit(event) {\n\n        event.preventDefault()\n\n        // Simple POST request with a JSON body using fetch\n        const requestOptions = {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            dataType: 'json',\n            body: JSON.stringify(loginForm)\n        };\n        fetch('/_login', requestOptions)\n            .then(response => response.json())\n            .then(data => console.log(data));\n\n        const response = await AfterFormSubmit(loginForm);\n        console.log(\"my response\");\n        console.log(response);\n    }\n\n    // Each character input in form is recorded to form const\n    function UpdateLoginFormOnChange(event) {\n        UpdateFormOnChange(event, loginForm, setLoginForm);\n    }\n\n    // Render form\n    return (<div>\n        <form onSubmit={AfterLoginFormSubmit}>\n            {console.log(loginForm)}\n            {loginForm.length > 0 ? loginForm.map((data) => { return <Input\n                key={data.id}\n                id={data.id}\n                label={data.label}\n                type={data.type}\n                field={data.field}\n                update={UpdateLoginFormOnChange}\n            />  }) : \"\"}\n        </form>\n    </div>)\n}\n\n// Render each field\nfunction Input(props) {\n    return <div>\n        <label>{props.label}</label>\n        <input id={props.id} type={props.type} onChange={props.update} name={props.label} />\n    </div>\n}\n\n\nexport default _LoginForm;"]},"metadata":{},"sourceType":"module"}